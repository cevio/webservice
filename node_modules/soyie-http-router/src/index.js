var request = require('./request');
var response = require('./response');
var layer = require('./layer');
var utils = require('./utils');
var EventEmitter = require('events').EventEmitter;

var http = module.exports = function(){
    this.request = new request();
    this.response = new response();
    this.namespace = 'http';
    utils.defineFreeze(this.request, 'http', this);
    utils.defineFreeze(this.response, 'http', this);
    utils.defineFreeze(this, 'define', function(name, value){ utils.define(this, name, value); });
    utils.defineFreeze(this, 'defineFreeze', function(name, value){ utils.defineFreeze(this, name, value); });
    this.handle();
};

http.prototype = EventEmitter.prototype;
http.prototype.handle = function(){
    this.caseSensitive = false;
    this.defineFreeze('stacks', []);
    this.defineFreeze('push', usePush);
    this.defineFreeze('match', useMatch);
    this.define('listen', useListen);
    this.defineFreeze('looser', { sensitive: this.caseSensitive, strict: false, end: false });
    this.defineFreeze('strict', { sensitive: this.caseSensitive, strict: true, end: true });
};

http.prototype.use = function(path, fn){
    if ( typeof path === 'function' ){
        fn = path;
        path = '/';
    }
    return this.push('use', path, this.looser, fn);
};

http.prototype.load = function(path, fn){
    if ( typeof path === 'function' ){
        fn = path;
        path = '/';
    }

    return this.push('load', path, this.strict, fn);
};

http.prototype.active = function(path, fn){
    if ( typeof path === 'function' ){
        fn = path;
        path = '/';
    }

    return this.push('active', path, this.strict, fn);
};

http.request = request;
http.response = response;
http.createServer = function(callback){
    var httpServer = new http();
    typeof callback == 'function' &&
    callback(httpServer.request, httpServer.response);
    return httpServer;
};

function usePush(method, path, opts, fn){
    this.stacks.push(new layer(method, path, opts, fn));
    return this;
}

function useMatch(done){
    var idx = 0,
        req = this.request,
        res = this.response,
        path = req.path,
        method = req.method,
        stack = this.stacks;

    if ( !done ) done = function(){};
    if (stack.length === 0) return done();

    next();

    function next(err){
        if (err && err === 'route') return done();
        var layer = stack[idx++];
        if (!layer) return done(err);
        var matched = layer.match(path);

        if ( matched ){
            req.params = layer.params;
            if ( layer.method === 'use' ){
                if (err) {
                    layer.handle_error(err, req, res, next);
                } else {
                    layer.handle_request(req, res, next);
                }
            }else{
                if ( method === layer.method ){
                    if ( method === 'load' ){
                        method = 'active';
                        if (err) {
                            layer.handle_error(err, req, res, next);
                        } else {
                            layer.handle_request(req, res);
                            next();
                        }
                    }else{
                        if (err) {
                            layer.handle_error(err, req, res, next);
                        } else {
                            layer.handle_request(req, res);
                            next('route');
                        }
                    }
                }else{
                    if ( layer.method === 'active' && method === 'load' ){
                        var _done = done;
                        done = function(){
                            if (err) {
                                layer.handle_error(err, req, res, next);
                            }else{
                                layer.handle_request(req, res);
                            }
                            _done();
                        }
                    }
                    next(err);
                }
            }
        }else{ next(err); }
    }
}

function useListen(){
    var that = this;
    var sessionName = this.namespace + '-history';
    var histories = this.request.session[sessionName] || '[]';
    var url = this.request.href;
    histories = JSON.parse(histories);
    this.history = 'goahead';
    history.pushState({ url: url }, document.title, '#' + url);
    if ( histories.indexOf(url) === -1 ){
        histories.push(url);
        this.response.session.set(sessionName, histories);
    }
    this.match(function(){
        that.emit('ready', that.request, that.response);
    });
}